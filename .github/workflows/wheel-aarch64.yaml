name: Wheels

on: [pull_request]

jobs:
  build_wheels:
    name: Build wheel on ${{matrix.arch}} for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
	      ubuntu-latest,
	    ]
        arch: [auto]
        include:
          - os: ubuntu-latest
            arch: aarch64
    env:
      CIBW_ARCHS_LINUX: ${{matrix.arch}}
      CIBW_TEST_COMMAND: pytest --pyargs numcodecs
      CIBW_TEST_REQUIRES: pytest
      CIBW_SKIP: "pp* cp36-* *-musllinux_* *win32 *_i686 *_s390x"
      CIBW_ENVIRONMENT: "DISABLE_NUMCODECS_AVX2=1"
      CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET=10.9 DISABLE_NUMCODECS_AVX2=1 CFLAGS="$CFLAGS -Wno-implicit-function-declaration"'

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: docker/setup-qemu-action@v1
        if: ${{ matrix.arch == 'aarch64' }}
        name: Set up QEMU

      - uses: pypa/cibuildwheel@v2.12.0
        if: ${{ matrix.arch != 'aarch64' }}

      - uses: pypa/cibuildwheel@v2.12.0
        if: ${{ matrix.arch == 'aarch64' }}
        env:
          CIBW_ENVIRONMENT: 'DISABLE_NUMCODECS_AVX2=1 DISABLE_NUMCODECS_SSE2=1'

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse

  # build_sdist:
  #   name: Build source distribution
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - uses: actions/setup-python@v4
  #       name: Install Python
  #       with:
  #         python-version: '3.9'

  #     - name: Build sdist
  #       run: pipx run build --sdist

  #     - name: test install
  #       run: pip install dist/numcodecs*.tar.gz

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: dist/*.tar.gz

  # test_dist_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: artifact
  #         path: dist
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  #     - name: test
  #       run: |
  #         ls
  #         ls dist

  # upload_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: artifact
  #         path: dist
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{ secrets.pypi_password }}
  #         # To test: repository_url: https://test.pypi.org/legacy/
